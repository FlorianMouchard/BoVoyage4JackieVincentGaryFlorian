@model BoVoyage4.Models.Destination

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/BackOffice/Views/Shared/_LayoutBO.cshtml";
}

<h2>Modification d'une destination</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Destination</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Continent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Continent, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Continent, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Pays, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Pays, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Pays, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Region, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Enregistrer les modifications" onclick="return confirm('Confirmer ?');" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<hr />
<div class="row">
    @foreach (var file in Model.Files)
    {
        <div class="col-md-3" id="div-file-@file.ID">
            <img class="img-thumbnail" title="@file.Nom" src="data:@file.TypeContenu;base64, @System.Convert.ToBase64String(file.Contenu)" />
            <p>@file.Nom <a href="#" class="btn btn-danger suppr" data-id="@file.ID"><i class="fa fa-remove"></i></a></p>
        </div>
    }
</div>

<form action="@Url.Action("AddFile", "Destinations")" method="post" enctype="multipart/form-data">
    @Html.HiddenFor(x => x.ID)
    <div class="form-group">
        <label>Fichier</label>
        <input type="file" name="upload" class="form-control" />
    </div>
    <button type="submit" onclick="return confirm('Confirmer ?');" class="btn btn-warning">Ajouter</button>
</form>

<div>
    @Html.ActionLink("Revenir à la liste des destinations", "Index")
</div>

<script>
$(document).ready(function () {
            $("a.suppr").click(function () {
                var idFile = $(this).data("id");
                $.ajax({
                    url: "@Url.Action("DeleteFile", "Destinations")",
                    type: "POST",
                    dataType: "json",
                    data: { id: idFile },
                    success: function (obj) {
                        $("#div-file-" + idFile).remove();
                        alert("Fichier supprimer");
                    }
                });
            });
});
</script>
@section SectionScripts{
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        tinymce.init({ selector: '#Description' })
    </script>
}